-- corrects name of jurisdiction_id
DROP VIEW public.jurisdictions_with_currwip;

CREATE OR REPLACE VIEW public.jurisdictions_with_currwip AS
SELECT
	j.id AS jurisdiction_id
	, s.name AS state_name
	, j.name AS jurisdiction_name
	, u.id AS editor_user_id
	, max(wj.id) AS wip_jurisdiction_id
FROM
	jurisdiction j
	JOIN state s ON j.state_id = s.id
	LEFT JOIN wip_jurisdiction wj ON j.id = wj.jurisdiction_id
		AND (wj.edit_basis_wip_jurisdiction_id IS NULL
			AND j.wip_jurisdiction_id IS NULL
			OR wj.edit_basis_wip_jurisdiction_id IS NOT NULL
			AND j.wip_jurisdiction_id IS NOT NULL
			AND j.wip_jurisdiction_id = wj.edit_basis_wip_jurisdiction_id)
	LEFT JOIN "user" u ON wj.editor_user_id = u.id
GROUP BY
	s.name
	, j.name
	, j.id
	, u.id
ORDER BY
	s.name
	, j.name
	, u.id;

CREATE TABLE public.gis_shapes (
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY
	, dataset text NOT NULL
	, geo geometry(MultiPolygon , 4326) NOT NULL
	, name text
	, statefp text
	, countyfp text
	, countyns text
	, placefp text
	, placens text
	, stusps text
	, statens text
	, cousubfp text
	, cousubns text
	, zcta5ce10 text
	, CONSTRAINT gis_shapes_pkey PRIMARY KEY (id)
);

DROP VIEW public.states_json;

DROP VIEW public.state_with_jurisdictions_json;

DROP VIEW public.state_json;

CREATE TYPE public.enum_state_jurisdiction_type_v2 AS ENUM (
	'County'
	, 'Parish'
	, 'Region'
	, 'County or City'
	, 'City or Township'
	, 'Municipality'
	, 'Town or City'
);

ALTER TABLE public.wip_state
	ALTER COLUMN jurisdiction_type DROP DEFAULT ,
	ALTER COLUMN jurisdiction_type SET DATA TYPE enum_state_jurisdiction_type_v2 USING jurisdiction_type::text::enum_state_jurisdiction_type_v2 ,
	ALTER COLUMN jurisdiction_type SET DEFAULT 'County'::enum_state_jurisdiction_type_v2;

ALTER TABLE public.state
	ALTER COLUMN jurisdiction_type DROP DEFAULT ,
	ALTER COLUMN jurisdiction_type SET DATA TYPE enum_state_jurisdiction_type_v2 USING jurisdiction_type::text::enum_state_jurisdiction_type_v2 ,
	ALTER COLUMN jurisdiction_type SET DEFAULT 'County'::enum_state_jurisdiction_type_v2;

CREATE OR REPLACE VIEW public.states_json AS
SELECT
	array_to_json(array_agg(t0.state_json)) AS states_json
FROM (
	SELECT
		json_build_object('id' , s.id , 'abbreviation' , s.abbreviation , 'name' , s.name , 'timezoneDefault' , COALESCE(s.timezone_default , ''::text) , 'authorityName' , COALESCE(s.authority_name , ''::text) , 'jurisdictionType' , COALESCE(s.jurisdiction_type , 'County'::enum_state_jurisdiction_type_v2) , 'isLateRegistrationPossible' , COALESCE(s.is_late_registration_possible , 'U'::enum_ynu) , 'stateType' , COALESCE(s.state_type , 'State'::enum_state_state_type)) AS state_json
	FROM
		state s
	ORDER BY
		s.name) t0;

CREATE OR REPLACE VIEW public.state_json AS
SELECT
	s.id
	, json_build_object('id' , s.id , 'abbreviation' , s.abbreviation , 'name' , s.name , 'authorityName' , COALESCE(s.authority_name , ''::text) , 'jurisdictionType' , COALESCE(s.jurisdiction_type , 'County'::enum_state_jurisdiction_type_v2) , 'isLateRegistrationPossible' , COALESCE(s.is_late_registration_possible , 'U'::enum_ynu) , 'stateType' , COALESCE(s.state_type , 'State'::enum_state_state_type) , 'importantdates' , COALESCE(t_js_impdates.dates_json , '[]'::json) , 'infotabs' , COALESCE(t_js_infotabs.infotabs_json , '[]'::json) , 'news' , COALESCE(t_js_news.news_json , '[]'::json) , 'notices' , COALESCE(t_js_notices.notices_json , '[]'::json) , 'phones' , COALESCE(t_js_phones.tn_json , '[]'::json) , 'urls' , COALESCE(t_js_urls.urls_json , '[]'::json)) AS state_json
FROM
	state s
	LEFT JOIN (
		SELECT
			t0.state_id
			, array_to_json(array_agg(t0.date_json)) AS dates_json
		FROM (
			SELECT
				sd.state_id
				, json_build_object('importantDateTypeId' , dt.id , 'importantDateTypeName' , dt.name , 'dateType' , dt.date_type , 'beginTime' , to_char(sd.begin_date + sd.begin_time::time WITHOUT time zone , 'YYYY-MM-DD HH24:MI:SS'::text) , 'endTime' , to_char(sd.end_date + sd.end_time::time WITHOUT time zone , 'YYYY-MM-DD HH24:MI:SS'::text) , 'note' , COALESCE(sd.note , ''::text)) AS date_json
			FROM
				state_importantdate sd
				JOIN importantdatetype dt ON sd.importantdatetype_id = dt.id
			ORDER BY
				sd.end_time
				, dt.name) t0
		GROUP BY
			t0.state_id) t_js_impdates ON s.id = t_js_impdates.state_id
	LEFT JOIN (
		SELECT
			t0.state_id
			, array_to_json(array_agg(t0.infotab_json) , TRUE) AS infotabs_json
		FROM (
			SELECT
				si.state_id
				, json_build_object('id' , si.id , 'stateId' , si.state_id , 'sortOrder' , si.sort_order , 'caption' , si.caption , 'html' , si.html , 'type' , si.type) AS infotab_json
			FROM
				state_infotab si) t0
		GROUP BY
			t0.state_id) t_js_infotabs ON s.id = t_js_infotabs.state_id
	LEFT JOIN (
		SELECT
			t0.state_id
			, array_to_json(array_agg(t0.newslink_json) , TRUE) AS news_json
		FROM (
			SELECT
				nl.state_id
				, json_build_object('id' , nl.id , 'datePosted' , to_char(nl.date_posted , 'YYYY-MM-DD HH24:MI:SS'::text) , 'stateId' , nl.state_id , 'caption' , nl.caption , 'url' , nl.url , 'summary' , nl.summary) AS newslink_json
			FROM
				state_news nl
			ORDER BY
				nl.date_posted DESC) t0
		GROUP BY
			t0.state_id) t_js_news ON s.id = t_js_news.state_id
	LEFT JOIN (
		SELECT
			t0.state_id
			, array_to_json(array_agg(t0.notice_json) , TRUE) AS notices_json
		FROM (
			SELECT
				jn.state_id
				, json_build_object('id' , jn.id , 'severity' , jn.severity , 'message' , jn.message , 'datePosted' , to_char(jn.date_posted , 'YYYY-MM-DD HH24:MI:SS'::text)) AS notice_json
			FROM
				state_notice jn
			ORDER BY
				jn.date_posted
				, jn.id DESC) t0
		GROUP BY
			t0.state_id) t_js_notices ON s.id = t_js_notices.state_id
	LEFT JOIN (
		SELECT
			t0.state_id
			, array_to_json(array_agg(t0.tn_json) , TRUE) AS tn_json
		FROM (
			SELECT
				sp.state_id
				, json_build_object('id' , sp.id , 'number' , sp.phone_number , 'description' , COALESCE(sp.description , ''::text) , 'phoneNumberTypeName' , pnt.name , 'sortOrder' , pnt.sort_order * 10 + sp.sort_order) AS tn_json
			FROM
				state_phone sp
				JOIN phonenumbertype pnt ON sp.phonenumbertype_id = pnt.id
			ORDER BY
				(pnt.sort_order * 10 + sp.sort_order)) t0
		GROUP BY
			t0.state_id) t_js_phones ON s.id = t_js_phones.state_id
	LEFT JOIN (
		SELECT
			t0.state_id
			, array_to_json(array_agg(t0.url_json) , TRUE) AS urls_json
		FROM (
			SELECT
				u.state_id
				, json_build_object('id' , u.id , 'urlTypeId' , ut.id , 'urlTypeName' , ut.name , 'isEmail' , ut.is_email , 'url' , CASE WHEN u.url !~~ 'http%'::text
						AND ut.is_email = FALSE THEN
						'https://'::text || u.url
					ELSE
						u.url
					END , 'name' , COALESCE(u.name , ut.name , ''::text) , 'description' , COALESCE(u.description , ''::text)) AS url_json
			FROM
				state_url u
			JOIN urltype ut ON u.urltype_id = ut.id
		ORDER BY
			u.id) t0
	GROUP BY
		t0.state_id) t_js_urls ON s.id = t_js_urls.state_id;

CREATE OR REPLACE VIEW public.state_with_jurisdictions_json AS
SELECT
	s.id
	, s.state_json::jsonb || t2.jurisdictions_json::jsonb AS state_json
FROM
	state_json s
	LEFT JOIN (
		SELECT
			t0.id
			, json_build_object('jurisdictions' , array_to_json(array_agg(t0.jurisdiction_json))) AS jurisdictions_json
		FROM (
			SELECT
				j.state_id AS id
				, json_build_object('id' , j.id , 'name' , j.name , 'authorityName' , COALESCE(j.authority_name , ''::text)) AS jurisdiction_json
			FROM
				jurisdiction j
			ORDER BY
				j.name) t0
		GROUP BY
			t0.id) t2 ON s.id = t2.id;

DROP TYPE public.enum_state_jurisdiction_type;

CREATE INDEX gis_shapes_dataset_idx ON public.gis_shapes (dataset);

CREATE INDEX gis_shapes_statefp_idx ON public.gis_shapes (statefp);

CREATE INDEX gis_shapes_countyfp_idx ON public.gis_shapes (countyfp);

CREATE INDEX gis_shapes_placefp_idx ON public.gis_shapes (placefp);

CREATE INDEX gis_shapes_zcta5ce10_idx ON public.gis_shapes (zcta5ce10);

CREATE INDEX gis_shapes_geo_idx ON public.gis_shapes USING GIST (geo);

CREATE INDEX calendar_date_actual_idx ON public.calendar (date_actual);

