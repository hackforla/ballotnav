name: Build Push and Deploy into AWS ECS
on:
  push:
    branches:
      - master
  release:
    types:
      - created
  workflow_dispatch:
    inputs:
      env:
        description: 'AWS Env'
        required: true
        default: 'dev'
      ref:
        description: 'Branch, Tag, or SHA'
        required: true
env:
  AWS_APP_NAME: ballotnav
  AWS_REGION: us-west-2
jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    steps:
    - name: Debug Action
      uses: hmarr/debug-action@v1.0.0
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.ref }}
    - name: Set AWS Env & Image Tag per workflow
      run: |
        SHORT_SHA=$(git rev-parse --short HEAD)
        if [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
            if [[ "$GITHUB_REF" == refs/heads/master ]]; then
                echo AWS_APPENV="$AWS_APP_NAME"-stage >> $GITHUB_ENV
                echo IMAGE_TAG=$SHORT_SHA >> $GITHUB_ENV
            fi
        fi
        if [[ "$GITHUB_EVENT_NAME" == "release" ]]; then
            RELEASE_TAG=$(git describe --tags)
            echo AWS_APPENV="$AWS_APP_NAME"-prod >> $GITHUB_ENV
            echo IMAGE_TAG=$RELEASE_TAG >> $GITHUB_ENV
        fi
        if [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]]; then
            INPUT_ENV=${{ github.event.inputs.env }}; INPUT_REF=${{ github.event.inputs.ref }}
            echo AWS_APPENV="$AWS_APP_NAME"-$INPUT_ENV >> $GITHUB_ENV
            echo IMAGE_TAG=$SHORT_SHA >> $GITHUB_ENV
        fi
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.INCUBATOR_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.INCUBATOR_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Pull Task Definition & write to file
      id: aws-task-definition
      run: |
        echo "::set-output name=task-definition::$(\
          aws ecs describe-task-definition \
            --task-definition ${{ env.AWS_APPENV }}-td \
            --query taskDefinition | \
            jq 'del(.taskDefinitionArn,.revision,.status,.registeredBy,.registeredAt,.compatibilities,.requiresAttributes)' > task-def.json)"
    - name: Init Docker Cache
      uses: satackey/action-docker-layer-caching@v0.0.11
      with:
        key: ${{ github.workflow }}-1-{hash}
        restore-keys: |
          ${{ github.workflow }}-1-
    - name: Build Docker Image
      run: docker build --file backend/Dockerfile ./backend
    - name: Push Docker Image
      uses: kciter/aws-ecr-action@v3
      with:
        access_key_id: ${{ secrets.INCUBATOR_AWS_ACCESS_KEY_ID }}
        secret_access_key: ${{ secrets.INCUBATOR_AWS_SECRET_ACCESS_KEY }}
        account_id: ${{ secrets.INCUBATOR_AWS_ACCOUNT_ID }}
        repo: ${{ env.AWS_APPENV }}
        region: ${{ env.AWS_REGION }}
        tags: latest,${{ env.IMAGE_TAG }}
        dockerfile: backend/Dockerfile
        path: ./backend
    - name: Interpolate new Docker Image into Task Definition
      id: task-definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-def.json
        container-name: ${{ env.AWS_APPENV }}-container
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_APPENV }}:${{ env.IMAGE_TAG }}
    - name: Deploy Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-definition.outputs.task-definition }}
        service: ${{ env.AWS_APPENV }}
        cluster: ${{ env.AWS_APPENV }}
        wait-for-service-stability: false
        wait-for-minutes: 5 minutes
